{"version":3,"sources":["components/NavBar.js","components/Form.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","concat","mode","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","Form","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","email","setEmail","Email","Fragment","style","color","heading","backgroundColor","value","onChange","event","target","rows","toUpperCase","showAlert","str_arr","split","i","length","includes","Alert","alert","msg","App","setMode","setAlert","setTimeout","title","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.51fa026c.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function NavBar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg bg-${props.mode} navbar-${props.mode} text-${props.mode === 'light'?'dark':'light'}`}>\r\n    <div className=\"container-fluid \">\r\n      <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          </li>\r\n          \r\n        </ul>\r\n      </div>\r\n    </div>\r\n        <div className=\"form-check form-switch\">\r\n            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n        </div>\r\n  </nav>\r\n  );\r\n}\r\n","import React, {useState} from 'react'\r\n\r\n\r\n\r\nexport default function Form(props) {\r\n    const [text,setText] = useState(\"Enter Text here!\");\r\n    const [email,setEmail] = useState(\"\");\r\n    let Email='';\r\n    const HandleClick=()=>{\r\n        let a = text.toUpperCase();\r\n        setText(a);\r\n        props.showAlert('Text transform to uppercase','success')\r\n    }\r\n    const HandleClear=()=>{\r\n        let a = \"\";\r\n        setText(a);\r\n        props.showAlert('Text cleard','success')\r\n    }\r\n    const HandleOnchange=(event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const HandleExtract=()=>{\r\n        Email='';\r\n        let str_arr = text.split(' ');\r\n        for(let i=0;i<str_arr.length;i++)\r\n        {\r\n            if(str_arr[i].includes('@'))\r\n            {\r\n                Email+=str_arr[i];\r\n                Email+=\" \";\r\n            }\r\n        }\r\n        if(Email === ''){\r\n            Email =\"No Email found!\"\r\n        }\r\n        else{\r\n            props.showAlert('Email(s) has been extracted','success')\r\n        }\r\n        setEmail(Email);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n        <div style={{color: props.mode === 'light'?'black':'white'}}>\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\" >\r\n                <textarea style={{backgroundColor: props.mode === 'light'?'white':'black', color: props.mode === 'light'?'black':'white'}} value= {text} className=\"form-control\" onChange = {HandleOnchange} id=\"myBox\" rows=\"5\"></textarea>\r\n            </div>\r\n            <button className='btn btn-primary' onClick={HandleClick}>Convert</button>\r\n            <button className='btn btn-primary mx-2' onClick={HandleClear}>Clear</button>\r\n            <button className='btn btn-primary mx-2' onClick={HandleExtract}>Extract</button>\r\n        </div>\r\n        <div style={{color: props.mode === 'light'?'black':'white'}}>\r\n            <h1 >Your text Summary</h1>\r\n            <p>{text.split(\" \").length} words {text.length} chracters</p>\r\n            <p>{text.split(\" \").length * 0.008} Minutes required to read</p>\r\n            <h4>Email(s) in text</h4>\r\n            <p style={{color:\"red\"}}>{email}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    \r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{props.alert.type}</strong> {props.alert.msg}\r\n        </div>\r\n\r\n  )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Form from './components/Form';\n// import About from './components/About';\nimport React, {useState} from 'react';\nimport Alert from './components/Alert';\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null)\n  const showAlert=(msg,type)=>{\n    setAlert({\n      msg:msg,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n  }\n\n  const toggleMode=()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = \"black\";\n      showAlert(\"Dark mode has been Enabled\",'success');\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been Enabled\",'success');\n\n    }\n  }\n  \n  return (\n  <>\n  {/* <Router> */}\n    <NavBar title = 'TextUtil' mode = {mode} toggleMode = {toggleMode}/>\n    <Alert alert = {alert}/>\n    <div className=\"container\">\n    {/* <Routes>\n      <Route exact path=\"/\" element={<Form heading = 'Enter text to convert' mode = {mode} showAlert = {showAlert}/>}/>\n      <Route exact path=\"/about\" element={<About/>}/>\n    </Routes>\n       */\n    <Form heading = 'Enter text to convert' mode = {mode} showAlert = {showAlert}/>\n       }\n    </div>\n    {/* <About/> */}\n    {/* </Router> */}\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}